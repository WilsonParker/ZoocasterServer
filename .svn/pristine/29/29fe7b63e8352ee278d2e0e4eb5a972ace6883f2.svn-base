package com.graction.lumi.listener;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.gson.Gson;
import com.graction.lumi.data.DataStorage;
import com.graction.lumi.model.data.station.StationModel;


/**
 * Application Lifecycle Listener implementation class InitListener
 *
 */
public class InitListener implements ServletContextListener {
	@Autowired
	private SqlSession sqlSession;
	/**
	 * Default constructor.
	 */
	public InitListener() {
		// TODO Auto-generated constructor stub
		System.out.println("InitListener");
		
		/*DataTableManager.getInstance().setSqlSession(sqlSession);
		DataTableManager.getInstance().initDBWeatherRegionTable(sqlSession);
		DataTableManager.getInstance().initDBWeatherTable(sqlSession);*/
	}

	/**
	 * @see ServletContextListener#contextDestroyed(ServletContextEvent)
	 */
	public void contextDestroyed(ServletContextEvent arg0) {
		// TODO Auto-generated method stub
		System.out.println("contextDestroyed");
	}

	/**
	 * @see ServletContextListener#contextInitialized(ServletContextEvent)
	 */
	public void contextInitialized(ServletContextEvent arg0) {
		// TODO Auto-generated method stub
		System.out.println("contextInitialized");
		DataStorage.Path_Directory = arg0.getServletContext().getRealPath("/").replaceAll("\\\\", "/");
		// System.out.println(DataStorage.Path_Directory);
		// C:\Developer\Server\apache-tomcat-9.0.0.M26 STS\wtpwebapps\Lumi\resources\data\json
		File file = new File(DataStorage.Path.PATH_DIR_JSON + "station.json");
		StringBuffer sb = new StringBuffer();
		try {
			////////////////////////////////////////////////////////////////
			BufferedReader in = new BufferedReader( new FileReader(DataStorage.Path_Directory + DataStorage.Path.PATH_DIR_JSON + "station.json"));
			String s;

			while ((s = in.readLine()) != null) {
				// System.out.println(s);
				sb.append(s);
			}
			in.close();
			////////////////////////////////////////////////////////////////
		} catch (IOException e) {
			System.err.println(e); // 에러가 있다면 메시지 출력
			System.exit(1);
		}
		
		System.out.println(sb.toString());
		StationModel stationModel = new Gson().fromJson(sb.toString(), StationModel.class);
		System.out.println(stationModel);
	}

}
