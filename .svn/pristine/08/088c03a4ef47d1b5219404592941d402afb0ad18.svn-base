package com.graction.lumi.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.google.code.geocoder.Geocoder;
import com.google.code.geocoder.GeocoderRequestBuilder;
import com.google.code.geocoder.model.GeocodeResponse;
import com.google.code.geocoder.model.GeocoderRequest;
import com.google.code.geocoder.model.GeocoderResult;
import com.google.code.geocoder.model.LatLng;
import com.graction.lumi.data.DataStorage;
import com.graction.lumi.model.xml.address.Address;
import com.graction.lumi.model.xml.address.Gugun;
import com.graction.lumi.model.xml.address.GugunList;
import com.graction.lumi.model.xml.address.Si;
import com.graction.lumi.model.xml.weather.Weather;
import com.graction.lumi.util.log.HLogger;
import com.graction.lumi.util.log.HLogger.LogType;

/**
 * Handles requests for the application home page.
 */
@Controller
public class TestController {

	private static final HLogger logger = new HLogger(TestController.class);

	@RequestMapping(value = "/dailyforecastTestTest", method = RequestMethod.GET)
	public String dailyforecastTest(HttpServletRequest request, HttpServletResponse response) {
		Geocoder geocoder = new Geocoder();
		System.out.println(request.getParameter("lat"));
		System.out.println(request.getParameter("lon"));
		LatLng latlng = new LatLng("37.566535", "126.97796919999996");
		// LatLng latlng = new LatLng("37.566535", "126.97796919999996");
		GeocoderRequest geocoderRequest = new GeocoderRequestBuilder().setLocation(latlng).setLanguage("ko")
				.getGeocoderRequest();
		GeocodeResponse geocoderResponse;
		try {
			geocoderResponse = geocoder.geocode(geocoderRequest);
			geocoder.geocode(geocoderRequest);
			GeocoderResult geocoderResult = geocoderResponse.getResults().iterator().next();

			System.out.println(geocoderResult.getFormattedAddress());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return "home";
	}

	@RequestMapping(value = "/weatherTest", method = RequestMethod.GET)
	public void weatherTest(HttpServletRequest request, HttpServletResponse response) {
		StringBuilder sb = new StringBuilder();
		for (Weather weather : DataStorage.weatherData.getWeathers().getWeather()) {
			sb.append(String.format("(\"%s\", %d, %d, %d),\n", weather.getMessage(), 0, 0, 0));
		}
		logger.log(LogType.INFO, sb.toString());
	}

	@RequestMapping(value = "/addressTest", method = RequestMethod.GET)
	public void addressTest(HttpServletRequest request, HttpServletResponse response) {
		StringBuilder sb = new StringBuilder();
		for (Address address : DataStorage.addressData.getAddresses().getAddress()) {
			for (Si si : address.getSiList().getSi()) {
				GugunList gugnList = si.getGugunList();
				if (gugnList == null) {
					sb.append(String.format("(\"%s\", \"%s\", \"%s\"),\n", address.getName(), si.getName(), ""));
				} else {
					for (Gugun gugun : si.getGugunList().getGugun()) {
						sb.append(String.format("(\"%s\", \"%s\", \"%s\"),\n", address.getName(), si.getName(),
								gugun.getName()));
					}
				}
			}
		}
		logger.log(LogType.INFO, sb.toString());
	}

}
