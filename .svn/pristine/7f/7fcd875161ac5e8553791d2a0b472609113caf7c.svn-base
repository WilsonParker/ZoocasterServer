package com.graction.lumi.controller;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Locale;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.graction.lumi.data.DataStorage;
import com.graction.lumi.data.DataTableManager;
import com.graction.lumi.model.xml.weather.Weather;
import com.graction.lumi.util.InitializeManager;
import com.graction.lumi.util.format.DateManager;
import com.graction.lumi.util.log.HLogger;
import com.graction.lumi.util.log.HLogger.LogType;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	private static final HLogger logger = HLogger.getInstance(HomeController.class);
	@Autowired
	private SqlSession sqlSession;
	
	/*
	 * Home Page
	 */
	@RequestMapping(value = DataStorage.Mapping.MAPPING_INDEX, method = RequestMethod.GET)
	public String index(Model model, HttpServletRequest request, HttpServletResponse response) {
		/*Date date = new Date();
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate );*/
		request.setAttribute(DataStorage.Attribute.ATTR_SQLSESSION, sqlSession);
		InitializeManager.getInstance().init(model, request, response);
		return DataStorage.Path.PATH_VIEW_FRAME;
	}
	
	@RequestMapping(value = DataStorage.Mapping.MAPPING_HOME, method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		return DataStorage.Path.PATH_VIEW_HOME;
	}
	
	@RequestMapping(value = DataStorage.Mapping.MAPPING_MANAGE_WEATHER, method = RequestMethod.GET)
	public String manage_weather(Model model) {
		return DataStorage.Path.PATH_VIEW_MANAGE_WEATHER;
	}
	
	
	/*
	 * Style Page
	 */
	@RequestMapping(value = DataStorage.Mapping.MAPPING_STYLE)
	public String stylePage(Model model, HttpServletRequest request) {
		return DataStorage.Path.PATH_VIEW_STYLE;
	}
	
	/*
	 * Script Page
	 */
	@RequestMapping(value = DataStorage.Mapping.MAPPING_SCRIPT)
	public String scriptPage(Model model, HttpServletRequest request) {
		return DataStorage.Path.PATH_VIEW_SCRIPT;
	}
	
	/*
	 * Weather id change
	 * Action when weather changed
	 */
	@RequestMapping(value = DataStorage.Mapping.MAPPING_WEATHER_ID_CHANGE, method = RequestMethod.GET)
	public void weatherIdChange(HttpServletRequest request) {
		String key = request.getParameter(DataStorage.Key.KEY_WEATHER_KEY);
		int id = Integer.parseInt(request.getParameter(DataStorage.Key.KEY_WEATHER_ID));
		com.graction.lumi.model.weather.Weather weather = DataTableManager.getInstance().getWeatherModel(key).getFirstWeather();
		weather.setId(id);
		for(Iterator<Weather> iterator = DataStorage.weatherData.getWeathers().getWeather().iterator(); iterator.hasNext();) {
			Weather w= iterator.next();
			 if(w.getId() == id){
				 weather.setDescription(w.getMessage());
				 break;
			 }
		}
	}
	
	/*
	 * upload image file
	 * It runs when upload images
	 */
	@RequestMapping(value = DataStorage.Mapping.MAPPING_UPLOAD_IMAGES, method = RequestMethod.GET)
	public String uploadImage(HttpServletRequest request, HttpServletResponse response) {
		MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;
		MultipartFile mFile;
		DateManager dm = new DateManager();
		String realPath = DataStorage.Path_Directory+DataStorage.Path.PATH_DIR_IMAGES_BACKGROUND;
		logger.log(LogType.INFO,"realPath : "+realPath);
		for(Iterator<String> iterator = mRequest.getFileNames();iterator.hasNext();){
			mFile = mRequest.getFile(iterator.next());
			if(!mFile.isEmpty()){
				String originName = mFile.getOriginalFilename();
				logger.log(LogType.INFO,"Name : "+mFile.getName());	// <input type=file> name
				logger.log(LogType.INFO,"Origin Name : " + originName); // upload // file // name
				logger.log(LogType.INFO,"size  : " + mFile.getSize()); // size
				
				String ext = originName.substring(originName.lastIndexOf(".")+1);
				String realname = UUID.randomUUID().toString() + "." + ext;
				try {
					mFile.transferTo(new File(realPath+realname));
				} catch (IllegalStateException | IOException e) {
					logger.log(LogType.ERROR,"uploadImage(HttpServletRequest request, HttpServletResponse response)", e);
				}
			}
		}
		return null;
	}
}