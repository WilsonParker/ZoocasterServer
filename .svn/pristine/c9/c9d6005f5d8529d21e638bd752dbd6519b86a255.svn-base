package com.graction.lumi.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.graction.lumi.dao.RegionDAO;
import com.graction.lumi.dao.WeatherDAO;
import com.graction.lumi.data.DataStorage;
import com.graction.lumi.data.DataStorage.Attribute;
import com.graction.lumi.data.DataStorage.Key;
import com.graction.lumi.data.DataStorage.Mapping;
import com.graction.lumi.data.DataStorage.Param;
import com.graction.lumi.data.DataStorage.Path;
import com.graction.lumi.data.DataTableManager;
import com.graction.lumi.model.db.param.ParamUpdateWeatherDetail;
import com.graction.lumi.model.response.DataResponseModel;
import com.graction.lumi.model.xml.weather.Weather;
import com.graction.lumi.util.InitializeManager;
import com.graction.lumi.util.file.FileManager;
import com.graction.lumi.util.log.HLogger;
import com.graction.lumi.util.log.HLogger.LogType;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	private static final HLogger logger = new HLogger(HomeController.class);
	@Autowired
	private SqlSession sqlSession;
	
	private PrintWriter writer;
	
	/*
	 * Home Page
	 */
	@RequestMapping(value = Mapping.MAPPING_INDEX, method = RequestMethod.GET)
	public String index(Model model, HttpServletRequest request, HttpServletResponse response) {
		/*Date date = new Date();
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate );*/
		request.setAttribute(Attribute.ATTR_SQLSESSION, sqlSession);
		InitializeManager.getInstance().init(model, request, response);
		return Path.PATH_VIEW_FRAME;
	}
	
	/*
	 * Home Page
	 */
	@RequestMapping(value = Mapping.MAPPING_HOME, method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		return Path.PATH_VIEW_HOME;
	}
	
	/*
	 * Style Page
	 */
	@RequestMapping(value = Mapping.MAPPING_STYLE)
	public String stylePage(Model model, HttpServletRequest request) {
		return Path.PATH_VIEW_STYLE;
	}
	
	/*
	 * Script Page
	 */
	@RequestMapping(value = Mapping.MAPPING_SCRIPT)
	public String scriptPage(Model model, HttpServletRequest request) {
		return Path.PATH_VIEW_SCRIPT;
	}
	
	/*
	 * Weather Manage Page
	 * Can see the list of cached weather
	 */
	@RequestMapping(value = Mapping.MAPPING_MANAGE_WEATHER_CACHE, method = RequestMethod.GET)
	public String manage_weather(Model model) {
		model.addAttribute(Attribute.ATTR_CONTENT,Path.PATH_VIEW_MANAGE_WEATHER_CACHE);
		return Path.PATH_VIEW_FRAME;
	}
	
	/*
	 * Weather region Manage Page
	 */
	@RequestMapping(value = Mapping.MAPPING_MANAGE_WEATHER_REGION, method = RequestMethod.GET)
	public String manage_weather_region(HttpServletRequest request, Model model) {
		request.setAttribute(Attribute.ATTR_WEATHER_REGION_TABLE, DataTableManager.getInstance().getDBWeatherRegionTable());
		model.addAttribute(Attribute.ATTR_CONTENT,Path.PATH_VIEW_MANAGE_WEATHER_REGION);
		return Path.PATH_VIEW_FRAME;
	}
	
	/*
	 * Weather image manage Page
	 * show weather list
	 */
	@RequestMapping(value = Mapping.MAPPING_MANAGE_WEATHER_IMAGE)
	public String weatherManagePage(Model model, HttpServletRequest request) {
		if(!DataTableManager.getInstance().isWeatherTableCreated())
			DataTableManager.getInstance().initDBWeatherTable(sqlSession);
//		request.setAttribute(Attribute.ATTR_WEATHER_TABLES, sqlSession.getMapper(WeatherDAO.class).selectAllWeathers());
		model.addAttribute(Attribute.ATTR_CONTENT,Path.PATH_VIEW_MANAGE_WEATHER_IMAGE);
		return Path.PATH_VIEW_FRAME;
	}
	
	/*
	 * Weather image Detail Page
	 * manage Weather Image
	 */
	@RequestMapping(value = Mapping.MAPPING_MANAGE_WEATHER_IMAGE_DETAIL)
	public String weatherManageDetailPage(Model model, HttpServletRequest request, @RequestParam(Param.PARAM_CODE) int code) {
//		request.setAttribute(Attribute.ATTR_WEATHER_TABLES, sqlSession.getMapper(WeatherDAO.class).selectAllWeathers());
		model.addAttribute(Attribute.ATTR_CONTENT,Path.PATH_VIEW_MANAGE_WEATHER_IMAGE_DETAIL);
//		model.addAttribute(Attribute.ATTR_MAP, DataParser.getInstance().objToMap(DataTableManager.getInstance().getDBWeatherTable(code)));
//		model.addAttribute(Attribute.ATTR_WEATHER_TABLE, DataTableManager.getInstance().getDBWeatherTable(code));
		WeatherDAO dao = sqlSession.getMapper(WeatherDAO.class);
		model.addAttribute(Attribute.ATTR_WEATHER_TABLE, dao.selectWeatherTable(code));
		return Path.PATH_VIEW_FRAME;
	}

	/*
	 * Weather region manage Page
	 * show region reservation  list
	 */
	@RequestMapping(value = Mapping.MAPPING_MANAGE_WEATHER_REGION)
	public String regionReservationManagePage(Model model, HttpServletRequest request) {
		RegionDAO dao = sqlSession.getMapper(RegionDAO.class);
		model.addAttribute(Attribute.ATTR_WEATHER_REGION_RESERVATION_TABLE, dao.select_all_region_reservation());
		model.addAttribute(Attribute.ATTR_CONTENT, Path.PATH_VIEW_MANAGE_WEATHER_REGION);
		return Path.PATH_VIEW_FRAME;
	}
	
	/*
	 * Weather region add Page
	 * You can add region reservation here
	 */
	@RequestMapping(value = Mapping.MAPPING_MANAGE_WEATHER_REGION_ADD)
	public String regionReservationAddPage(Model model, HttpServletRequest request) {
		request.setAttribute(Attribute.ATTR_SQLSESSION, sqlSession);
		model.addAttribute(Attribute.ATTR_CONTENT, Path.PATH_VIEW_MANAGE_WEATHER_REGION_ADD);
		return Path.PATH_VIEW_FRAME;
	}
	
	/*
	 * Select Region
	 * Action when Click region item at manage_weather_region
	 * Clicking a node brings up a child list
	 */
	/*@RequestMapping(value = Mapping.MAPPING_WEATHER_REGION_SELECT, method = RequestMethod.GET)
	public void selectRegion(HttpServletRequest request) {
		String key = request.getParameter(Key.KEY_WEATHER_KEY);
	}*/
	
	/*
	 * Weather id change
	 * Action when weather changed
	 */
	@RequestMapping(value = Mapping.MAPPING_WEATHER_ID_CHANGE, method = RequestMethod.GET)
	public void weatherIdChange(HttpServletRequest request) {
		String key = request.getParameter(Key.KEY_WEATHER_KEY);
		int id = Integer.parseInt(request.getParameter(Key.KEY_WEATHER_ID));
		com.graction.lumi.model.weather.Weather weather = DataTableManager.getInstance().getWeatherModel(key).getFirstWeather();
		weather.setId(id);
		for(Iterator<Weather> iterator = DataStorage.weatherData.getWeathers().getWeather().iterator(); iterator.hasNext();) {
			Weather w= iterator.next();
			 if(w.getId() == id){
				 weather.setDescription(w.getMessage());
				 break;
			 }
		}
	}
	
	/*
	 * upload image file
	 * It runs when upload images
	 * Weather Modify
	 */
	@RequestMapping(value = Mapping.MAPPING_WEATHER_DETAIL_UPLOAD, method = RequestMethod.POST)
	public void weatherDetailupload(HttpServletRequest request, HttpServletResponse response) {
		int code = Integer.parseInt(request.getParameter(Param.PARAM_CODE));
		DataResponseModel<ParamUpdateWeatherDetail> resModel = FileManager.getInstance().weatherDetailUpload(request, response);
		ParamUpdateWeatherDetail param = resModel.getResult();
		param.setCode(code);
		sqlSession.getMapper(WeatherDAO.class).updateWeatehrDetail(param);
		try {
			writer = response.getWriter();
			writer.print(resModel.getCode());
		} catch (IOException e) {
			logger.log(LogType.ERROR,"void weatherDetailupload(HttpServletRequest request, HttpServletResponse response)",e);
		}
	}
	
	/*
	 * upload image file
	 * It runs when region reservation add
	 */
	@RequestMapping(value = Mapping.MAPPING_WEATHER_REGION_ADD, method = RequestMethod.POST)
	public void regionReservationAdd(HttpServletRequest request, HttpServletResponse response) {
		String fileInfo = FileManager.getInstance().reigonAddUpload(request, response);
		logger.log(LogType.INFO,"void regionReservationAdd(HttpServletRequest request, HttpServletResponse response)","fileInfo : %s %s %s", fileInfo, request.getParameter(Param.PARAM_REGION), request.getParameter(Param.PARAM_TIME), request.getParameter(Param.PARAM_PRIORITIZATION));
		/*ParamUpdateWeatherDetail param = resModel.getResult();
		param.setCode(code);
		sqlSession.getMapper(WeatherDAO.class).updateWeatehrDetail(param);
		try {
			writer = response.getWriter();
			writer.print(resModel.getCode());
		} catch (IOException e) {
			logger.log(LogType.ERROR,"void weatherDetailupload(HttpServletRequest request, HttpServletResponse response)",e);
		}*/
	}
}

//file:///C:/Developer/Server/apache-tomcat-9.0.0.M26 STS/wtpwebapps/Lumi/assets/images/background/sunny.jpg