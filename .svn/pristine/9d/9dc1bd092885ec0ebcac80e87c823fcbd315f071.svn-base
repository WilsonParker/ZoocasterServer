package com.graction.lumi.data;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

import org.apache.ibatis.session.SqlSession;

import com.graction.lumi.dao.WeatherDAO;
import com.graction.lumi.data.DataStorage.Server;
import com.graction.lumi.model.db.WeatherTable;
import com.graction.lumi.model.response.DailyForecastModel;
import com.graction.lumi.model.response.WeatherModel;
import com.graction.lumi.util.gps.GoogleLocationManager;
import com.graction.lumi.util.log.HLogger;
import com.graction.lumi.util.log.HLogger.LogType;

public class DataTableManager {
	private static final DataTableManager instance = new DataTableManager();
	private static final String LANGUAGE = "ko";

	private static Map<String, DailyForecastModel> DailyForecastTable = new HashMap<String, DailyForecastModel>();
	private static Map<String, WeatherModel> WeatherModelTable = new HashMap<String, WeatherModel>();
	
	private static Map<Integer, WeatherTable> DBWeatherTableMap = new HashMap<Integer, WeatherTable>();
	private static List<WeatherTable> DBWeatherTableList;

	private HLogger logger;
	private boolean isWeatherTableCreated = false;

	public DataTableManager() {
		logger = new HLogger(getClass());
	}

	public static DataTableManager getInstance() {
		return instance;
	}

	public void initDBWeatherTable(SqlSession sqlSession) {
		if(isWeatherTableCreated)
			return;
		WeatherDAO dao = sqlSession.getMapper(WeatherDAO.class);
		DBWeatherTableList = dao.selectAllWeathers();
		DBWeatherTableList.parallelStream().forEach(new Consumer<WeatherTable>() {
			@Override
			public void accept(WeatherTable t) {
				DBWeatherTableMap.put(t.getWeather_code(), t);
			}
		});
		isWeatherTableCreated = true;
	}
	
	
	public WeatherModel insertWeatherData(String lat, String lon, WeatherModel model) {
		String address = GoogleLocationManager.getInstance().getAddress(lat, lon);
//		String address = GoogleGeoManager.getInstance().getAddress(lat, lon);
//		String address = NaverLocationManager.getInstance().getAddress(lat, lon);

		logger.log(LogType.INFO, "insertWeatherData(String lat, String lon)", address);
		model.setAddress(address);
		WeatherModelTable.put(lat + Server.KEY_LATLNG_SPLIT + lon, model);

		return model;
	}

	public Map<String, DailyForecastModel> getDailyForecastTable() {
		return DailyForecastTable;
	}
	
	public DailyForecastModel getDailyForecastModel(String key) {
		return DailyForecastTable.get(key);
	}

	public Map<String, WeatherModel> getWeatherModelTable() {
		return WeatherModelTable;
	}
	
	public WeatherModel getWeatherModel(String key) {
		return WeatherModelTable.get(key);
	}

	public Map<Integer, WeatherTable> getDBWeatherTableMap() {
		return DBWeatherTableMap;
	}
	
	public WeatherTable getDBWeatherTable(Integer code) {
		return DBWeatherTableMap.get(code);
	}

	public List<WeatherTable> getDBWeatherTableList() {
		return DBWeatherTableList;
	}

	public boolean isWeatherTableCreated() {
		return isWeatherTableCreated;
	}
	
}
