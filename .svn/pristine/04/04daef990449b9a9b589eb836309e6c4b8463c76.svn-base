package com.graction.lumi.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.google.gson.Gson;
import com.graction.lumi.data.DataStorage.Mapping;
import com.graction.lumi.data.DataStorage.Server;
import com.graction.lumi.data.DataTableManager;
import com.graction.lumi.data.WeatherDataProvider;
import com.graction.lumi.model.openData.IntegratedAirQualityModel;
import com.graction.lumi.model.openData.NearbyMsrtnModel;
import com.graction.lumi.model.openWeather.DailyForecastModel;
import com.graction.lumi.model.openWeather.Forecast5DayModel;
import com.graction.lumi.model.openWeather.WeatherModel;
import com.graction.lumi.model.request.LatLonRequestModel;
import com.graction.lumi.model.skPlanet.FineDustModel;
import com.graction.lumi.net.Net;
import com.graction.lumi.util.DataProvideManager;
import com.graction.lumi.util.DataProvideManager.Complete;
import com.graction.lumi.util.DataProvideManager.Execution;
import com.graction.lumi.util.WriteManager;
import com.graction.lumi.util.gps.AddressManager;
import com.graction.lumi.util.gps.GoogleGeoManager;
import com.graction.lumi.util.log.HLogger;
import com.graction.lumi.util.log.HLogger.LogType;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 * Handles requests for the application home page.
 */
@Controller
@RequestMapping(Mapping.MAPPING_ROOT_APP)
public class AppController {

	private static final HLogger logger = new HLogger(AppController.class);
	private String lat, lon, gu;

	private DataProvideManager dataProvideManager;
	private WeatherModel weatherModel;
	private DailyForecastModel dailyForecastModel;
	private Forecast5DayModel forecast5DayModel;
	private FineDustModel fineDustModel;
	private IntegratedAirQualityModel integratedAirQualityModel;
	// private StringBuilder builder;
	private DataTableManager dataTableManager = DataTableManager.getInstance();


	/*
	 * Current Weather
	 * Using OpenWeather API
	 */
	@RequestMapping(value = Mapping.MAPPING_CURRENT_WEATHER, method = RequestMethod.GET)
	public void current_weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) {
		lat = httpServletRequest.getParameter(Server.PARAM_LAT);
		lon = httpServletRequest.getParameter(Server.PARAM_LON);
		dataProvideManager = new DataProvideManager(new Execution() {
			
			@Override
			public void execution() {
				Net.getInstance().getOpenWeatherFactoryIm().selectWeather(new LatLonRequestModel(lat, lon).getMap()).enqueue(new Callback<WeatherModel>() {

					@Override
					public void onResponse(Call<WeatherModel> call, Response<WeatherModel> response) {
						if (response.isSuccessful()) {
							weatherModel = response.body();
							weatherModel = dataTableManager.insertWeatherData(lat, lon, weatherModel);
							weatherModel = WeatherDataProvider.getInstance().setWeatherdata(weatherModel);
							logger.log(HLogger.LogType.INFO, "void current_weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) - onResponse(Call<WeatherModel> call, Response<WeatherModel> response)", "current weather insert successful");
							dataProvideManager.complete();
						} else {
							logger.log(HLogger.LogType.WARN, "void current_weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) - onResponse(Call<WeatherModel> call, Response<WeatherModel> response)", "current weather insert is not successful");
						}
					}

					@Override
					public void onFailure(Call<WeatherModel> call, Throwable t) {
						logger.log(HLogger.LogType.ERROR, "void current_weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) - onFailure(Call<WeatherModel> call, Throwable t)", "error is not successful", t);
						dataProvideManager.complete();
					}
				});
				
			}
		}, new Complete() {
			
			@Override
			public void complete() {
				try {
					 logger.log(HLogger.LogType.INFO, "void current_weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", new Gson().toJson(weatherModel));
					 WriteManager.getInstance().write(httpServletResponse, new Gson().toJson(weatherModel));
				} catch (Exception e) {
					logger.log(HLogger.LogType.ERROR, "void current_weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
				}				
			}
		});
		try {
			dataProvideManager.execution();
		} catch (InterruptedException e) {
			logger.log(HLogger.LogType.ERROR, "void current_weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
		}
	}
	

	/*
	 * 5day forecast / 3 hour
	 * Using OpenWeather API
	 */
	@RequestMapping(value = Mapping.MAPPING_FORECAST_5DAY, method = RequestMethod.GET)
	public void forecast5DayTest(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) {
		lat = httpServletRequest.getParameter(Server.PARAM_LAT);
		lon = httpServletRequest.getParameter(Server.PARAM_LON);
		
		dataProvideManager = new DataProvideManager(new Execution() {
			
			@Override
			public void execution() {
				Net.getInstance().getOpenWeatherFactoryIm().select5DayForecast(new LatLonRequestModel(lat, lon, LatLonRequestModel.KEY_OPEN_WEATHER).getMap()).enqueue(new Callback<Forecast5DayModel>() {
					
					@Override
					public void onResponse(Call<Forecast5DayModel> call, Response<Forecast5DayModel> response) {
						if(response.isSuccessful()) {
							if (response.isSuccessful()) {
								forecast5DayModel= response.body();
//								weatherModel = dataTableManager.insertWeatherData(lat, lon, weatherModel);
//								weatherModel = WeatherDataProvider.getInstance().setWeatherdata(weatherModel);
							}
							dataProvideManager.complete();
						}
					}
					
					@Override
					public void onFailure(Call<Forecast5DayModel> call, Throwable t) {
						logger.log(LogType.ERROR, "void onFailure(Call<Forecast5DayModel> call, Throwable t)", t);
						dataProvideManager.complete();
					}
				});
				
			}
		}, new Complete() {
			
			@Override
			public void complete() {
				try {
					// logger.log(HLogger.LogType.INFO, "void weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", new Gson().toJson(weatherModel));
					WriteManager.getInstance().write(httpServletResponse, new Gson().toJson(forecast5DayModel));
				} catch (IOException e) {
					logger.log(HLogger.LogType.ERROR, "void forecast5DayTest(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
				}				
			}
		});
		try {
			dataProvideManager.execution();
		} catch (InterruptedException e) {
			logger.log(HLogger.LogType.ERROR, "void current_weather(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
		}
		
		
	}
	
	
	/*
	 * 16 day forecast
	 * Using OpenWeather API
	 */
	@RequestMapping(value = Mapping.MAPPING_FORECAST_DAILY, method = RequestMethod.GET)
	public void dailyforecast(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) {
		lat = httpServletRequest.getParameter(Server.PARAM_LAT);
		lon = httpServletRequest.getParameter(Server.PARAM_LON);
		dataProvideManager = new DataProvideManager(new Execution() {

			@Override
			public void execution() {
				Net.getInstance().getOpenWeatherFactoryIm().selectDailyForcast(new LatLonRequestModel(lat, lon).getMap())
				.enqueue(new Callback<DailyForecastModel>() {

					@Override
					public void onResponse(Call<DailyForecastModel> call, Response<DailyForecastModel> response) {
						if (response.isSuccessful()) {
							dailyForecastModel = response.body();
						} else {
							logger.log(HLogger.LogType.WARN, "onResponse(Call<DailyForecastModel> call, Response<DailyForecastModel> response)", "warn is not successful");
						}
						dataProvideManager.complete();
					}

					@Override
					public void onFailure(Call<DailyForecastModel> call, Throwable t) {
						logger.log(HLogger.LogType.ERROR, "onFailure(Call<DailyForecastModel> call, Throwable t)", "error is not successful", t);
						dataProvideManager.complete();
					}
				});
			}

		}, new Complete() {

			@Override
			public void complete() {
				try {
					WriteManager.getInstance().write(httpServletResponse, new Gson().toJson(dailyForecastModel));
				} catch (Exception e) {
					logger.log(HLogger.LogType.ERROR, "void dailyforecast(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
					e.printStackTrace();
				}
			}
		});
		try {
			dataProvideManager.execution();
		} catch (InterruptedException e) {
			logger.log(HLogger.LogType.ERROR, "void dailyforecast(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
		}
	}
	
	@RequestMapping(value = Mapping.MAPPING_INTEGRATED_AIR_QUALITY, method = RequestMethod.GET)
	public void integratedAirQualityTest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {
		lat = httpServletRequest.getParameter(Server.PARAM_LAT);
		lon = httpServletRequest.getParameter(Server.PARAM_LON);
		
		Execution execution = new Execution() {

			@Override
			public void execution() {
				if(gu == null)
					gu = AddressManager.getInstance().extractAddress(GoogleGeoManager.getInstance().getAddress(lat, lon))[2];
				try {
					Net.getInstance().getOpenDataRetrofit().selectIntegratedAirQuality(new LatLonRequestModel(gu).getMap()).enqueue(new Callback<IntegratedAirQualityModel>() {
						
						@Override
						public void onResponse(Call<IntegratedAirQualityModel> call, Response<IntegratedAirQualityModel> response) {
							if(response.isSuccessful()) {
								integratedAirQualityModel = response.body();
								logger.log(LogType.INFO, "integratedAirQuality(HttpServletRequest request, HttpServletResponse response) - selectIntegratedAirQuality", "success response body : "+response.body());
								if(integratedAirQualityModel.getList() == null || integratedAirQualityModel.getList().size() == 0) 
									dataProvideManager.nextExecution();
								else
									dataProvideManager.complete();
							}else {
								dataProvideManager.nextExecution();
							}
						}
						
						@Override
						public void onFailure(Call<IntegratedAirQualityModel> call, Throwable t) {
							logger.log(LogType.ERROR, "integratedAirQuality(HttpServletRequest request, HttpServletResponse response) - selectIntegratedAirQuality","onFailure", t);
							dataProvideManager.nextExecution();
						}
					});
				} catch (Exception e) {
					logger.log(LogType.ERROR, "integratedAirQuality(HttpServletRequest request, HttpServletResponse response) - selectIntegratedAirQuality","Exception", e);
				}
			}

		};
		
		dataProvideManager = new DataProvideManager(execution , new Complete() {

			@Override
			public void complete() {
				try {
					logger.log(LogType.INFO, "integratedAirQuality(HttpServletRequest request, HttpServletResponse response) - selectIntegratedAirQuality", "toJson : "+new Gson().toJson(integratedAirQualityModel));
					WriteManager.getInstance().write(httpServletResponse, new Gson().toJson(integratedAirQualityModel));
				} catch (Exception e) {
					logger.log(HLogger.LogType.ERROR, "void integratedAirQualityTest(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
					e.printStackTrace();
				}
			}
		});
		
		dataProvideManager.addExecution(new Execution() {
			
			@Override
			public void execution() {
				try {
					Net.getInstance().getOpenDataRetrofit().selectNearByMsrtnList(new LatLonRequestModel(lat, lon, LatLonRequestModel.KEY_OPEN_DATA).getMap()).enqueue(new Callback<NearbyMsrtnModel>() {
						
						@Override
						public void onResponse(Call<NearbyMsrtnModel> call, Response<NearbyMsrtnModel> response) {
							if(response.isSuccessful()) {
								NearbyMsrtnModel nearbyMsrtnModel = response.body();
								logger.log(LogType.INFO, "integratedAirQuality(HttpServletRequest request, HttpServletResponse response) - selectNearByMsrtnList", "success response body : "+response.body());
								if(nearbyMsrtnModel.getList() == null || nearbyMsrtnModel.getList().size()==0) {
									dataProvideManager.nextExecution();
								}else {
									gu = nearbyMsrtnModel.getList().get(0).getStationName();
									execution.execution();
								}
							}else {
								dataProvideManager.nextExecution();
							}							
						}
						
						@Override
						public void onFailure(Call<NearbyMsrtnModel> call, Throwable t) {
							logger.log(LogType.ERROR, "integratedAirQuality(HttpServletRequest request, HttpServletResponse response) - selectNearByMsrtnList","onFailure", t);
							dataProvideManager.nextExecution();
						}
					});
				} catch (Exception e) {
					logger.log(LogType.ERROR, "integratedAirQuality(HttpServletRequest request, HttpServletResponse response) - selectNearByMsrtnList","Exception", e);
				}
			}
		});
		
		try {
			dataProvideManager.execution();
		} catch (InterruptedException e) {
			logger.log(HLogger.LogType.ERROR, "void integratedAirQualityTest(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
		}
		
	}
	/*
	 * Fine Dust
	 * Using SK Planet API
	 */
	@RequestMapping(value = Mapping.MAPPING_FINE_DUST, method = RequestMethod.GET)
	public void fineDust(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) {
		// FineDustData fineDustData = XmlParserForJAXB.getInstance().parseXmlToObject(FineDustData.class, File.FILE_NAME_XML_FINEDUSTDATA);
		// logger.log(HLogger.LogType.INFO, "void fineDust(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) - void onResponse(Call<WeatherModel> call, Response<WeatherModel> response)", "fineDustData : "+fineDustData);
		
		lat = httpServletRequest.getParameter(Server.PARAM_LAT);
		lon = httpServletRequest.getParameter(Server.PARAM_LON);
		logger.log(HLogger.LogType.INFO, "void fineDust(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) - void onResponse(Call<WeatherModel> call, Response<WeatherModel> response)", "current weather insert successful");
		dataProvideManager = new DataProvideManager(new Execution() {
			
			@Override
			public void execution() {
				Net.getInstance().getSKPlanetFactoryIm().selectFineDust(new LatLonRequestModel(lat, lon, LatLonRequestModel.KEY_SK_PLANET).getMap()).enqueue(new Callback<FineDustModel>() {
					
					@Override
					public void onResponse(Call<FineDustModel> arg0, Response<FineDustModel> response) {
						if (response.isSuccessful()) {
							fineDustModel = response.body();
							logger.log(HLogger.LogType.INFO, "void fineDust(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) - void onResponse(Call<FineDustModel> arg0, Response<FineDustModel> response)", "fine dust select successful");
						} else {
							logger.log(HLogger.LogType.WARN, "void fineDust(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) - void onResponse(Call<FineDustModel> arg0, Response<FineDustModel> response)", "fine dust select not successful");
						}
						dataProvideManager.complete();
					}
					
					@Override
					public void onFailure(Call<FineDustModel> arg0, Throwable t) {
						logger.log(HLogger.LogType.ERROR, "void fineDust(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) - void onFailure(Call<FineDustModel> arg0, Throwable t)", t);	
					}
				});
				
			}
		}, new Complete() {
			
			@Override
			public void complete() {
				try {
					WriteManager.getInstance().write(httpServletResponse, new Gson().toJson(fineDustModel));
				} catch (IOException e) {
					logger.log(HLogger.LogType.ERROR, "void fineDust(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Complete Error", e);
				}				
			}
		});
		try {
			dataProvideManager.execution();
		} catch (InterruptedException e) {
			logger.log(HLogger.LogType.ERROR, "void fineDust(HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse)", "Thread sleep Exception", e);
		}
	}
}
