package com.graction.lumi.data;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.code.geocoder.Geocoder;
import com.google.code.geocoder.GeocoderRequestBuilder;
import com.google.code.geocoder.model.GeocodeResponse;
import com.google.code.geocoder.model.GeocoderRequest;
import com.google.code.geocoder.model.GeocoderResult;
import com.google.code.geocoder.model.LatLng;
import com.graction.lumi.model.response.DailyForecastModel;
import com.graction.lumi.model.response.WeatherModel;
import com.graction.lumi.util.log.HLogger;
import com.graction.lumi.util.log.HLogger.LogType;

public class DataTableManager {
	private static final DataTableManager instance = new DataTableManager();
	private static final String LANGUAGE = "ko";

	private static Map<String, DailyForecastModel> DailyForecastTable = new HashMap<String, DailyForecastModel>();
	private static Map<String, WeatherModel> WeatherModelTable = new HashMap<String, WeatherModel>();;

	private HLogger logger;

	public DataTableManager() {
		logger = HLogger.getInstance(getClass());
	}

	public static DataTableManager getInstance() {
		return instance;
	}

	public WeatherModel insertWeatherData(String lat, String lon, WeatherModel model) {
		Geocoder geocoder = new Geocoder();
		LatLng latlng = new LatLng(lat, lon);
		GeocoderRequest geocoderRequest = new GeocoderRequestBuilder().setLocation(latlng).setLanguage(LANGUAGE)
				.getGeocoderRequest();
		GeocodeResponse geocoderResponse;
		GeocoderResult geocoderResult;
		try {
			geocoderResponse = geocoder.geocode(geocoderRequest);
			geocoder.geocode(geocoderRequest);
			geocoderResult = geocoderResponse.getResults().iterator().next();
			String address = geocoderResult.getFormattedAddress();
			logger.log(LogType.INFO, "insertWeatherData(String lat, String lon)", address);
			model.setAddress(address);
			WeatherModelTable.put(lat + DataStorage.Server.KEY_LATLNG_SPLIT + lon, model);
		} catch (IOException e) {
			logger.log(LogType.ERROR, "insertWeatherData(String lat, String lon)", e);
		}
		return model;
	}

	public static Map<String, DailyForecastModel> getDailyForecastTable() {
		return DailyForecastTable;
	}

	public static Map<String, WeatherModel> getWeatherModelTable() {
		return WeatherModelTable;
	}

}
