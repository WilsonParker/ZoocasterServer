package com.graction.lumi.util.parser;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Predicate;

import com.graction.lumi.util.log.HLogger;
import com.graction.lumi.util.log.HLogger.LogType;

public class DataParser {
	private static final DataParser instance = new DataParser();
	private static final HLogger logger = new HLogger(DataParser.class);

	public static DataParser getInstance() {
		return instance;
	}
	
	public Map<String, Object> objToMap(Object obj) {
		Map<String, Object> map = new HashMap<>();
		Map<String, Method> methods = new HashMap<>();
		Arrays.asList(obj.getClass().getDeclaredMethods()).parallelStream().filter(new Predicate<Method>() {

			@Override
			public boolean test(Method t) {
				return t.getName().toUpperCase().contains("GET");
			}

		}).forEach(new Consumer<Method>() {

			@Override
			public void accept(Method t) {
				methods.put(t.getName().toUpperCase().replaceAll("GET", ""), t);
			}
		});

		Arrays.asList(obj.getClass().getDeclaredFields()).forEach(new Consumer<Field>() {

			@Override
			public void accept(Field t) {
				try {
					Method m = methods.get(t.getName().toUpperCase());
					if (m != null)
						map.put(t.getName(), m.invoke(obj, null));
				} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
					logger.log(LogType.ERROR, "Map<String, Object> objToMap(Object obj)", e);
				}
			}

		});
		return map;
	}
}
